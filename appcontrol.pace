[package appcontrol]
[depends snum]
[depends time]

use snumops;
use snumimplicits;

<attributes>
<document>Provides basic functionality regarding the current application.</document>
</attributes>
element Application {

    <attributes>
    <document>Exits the application.</document>
    <javascriptvalue>()=>{throw "Application.Exit"}</javascriptvalue>
    </attributes>
    public get func() Exit;

    <attributes>
    <document>Pauses the main thread of the application for the specified duration.</document>
    </attributes>
    public Sleep(TimeSpan x) => SleepMs(x.MilliSeconds);

    <attributes>
    <javascriptvalue>(x)=>{var b=true;setTimeout(()=>b=false,x);while(b);}</javascriptvalue>
    </attributes>
    get func(UInt64) SleepMs;

    <attributes>
    <document>Write a single byte to the standard output</document>
    <javascriptvalue>(x)=>{console.log(String.fromCodePoint(x));}</javascriptvalue>
    </attributes>
    public get func(UInt8) WriteByte;

    <attributes>
    <document>Write a unicode character to the standard output</document>
    <javascriptvalue>(x)=>{console.log(String.fromCodePoint(x));}</javascriptvalue>
    </attributes>
    public get func(UInt32) WriteChar;

    public UInt8? ReadByte() => {
        value = _ReadByte();
        return
            when value == -1 then null
            else value:UInt8;
    }

    <attributes>
    <javascriptvalue>
((window["stdinbfr"]=[]),
(window["stdin"]=(x)=>{
    var l=x.length;
    for(var i=0;i&lt;l;i++)
        stdinbfr.push(x.charCodeAt(i));
}),
()=>{
    if(stdinbfr.length===0)return -1;
    return stdinbfr.shift();
})
    </javascriptvalue>
    </attributes>
    get func() -> Int16 _ReadByte;

    <attributes>
    <document>Reads a unicode character from the sandard input</document>
    </attributes>
    public UInt32? ReadChar() => {
        value = _ReadChar();
        return
            when value == -1 then null
            else value:UInt32;
    }

    <attributes>
    <javascriptvalue>
((window["stdinbfr"]=[]),
(window["stdin"]=(x)=>{
    var l=x.length;
    for(var i=0;i&lt;l;i++)
        stdinbfr.push(x.charCodeAt(i));
}),
()=>{
    if(stdinbfr.length===0)return -1;
    return stdinbfr.shift();
})
    </javascriptvalue>
    </attributes>
    get func() -> Int64 _ReadChar;

    <attributes>
    <javascriptvalue></javascriptvalue>
    </attributes>
    public get func() CommandLineFormat;

}
