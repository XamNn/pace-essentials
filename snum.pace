[package snum]

//aliases for number literal types
alias integer = [object Integer];
alias fractional = [object Denominator, object Numerator];
alias negativeinteger = [integer Negative];
alias negativefractional = [fractional Negative];

<!--
8-bit signed integer
Range: -128 = -(2^7) to 127 = (2^8)-1
Precision: fixed, 8 significant bits
-->
<attributes>
<document>Provides a type and functions for 8-bit signed integers.</document>
</attributes>
element Int8 {

	<attributes>
	<size>1</size>
	<ctype>int8_t</ctype>
	</attributes>
	struct { }

	public get Int8 MaxValue = FromInteger(0x7F);
	public get Int8 MinValue = FromInteger(0x80);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;(x+y)&amp;0xFF</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;(x-y)&amp;0xFF</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;(x*y)&amp;0xFF</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 Mod;

	public get func (Int8, Int8) -> Int8 Pow = func (x, y) => Int64.Pow(x:Int64, y:Int64):Int8;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (Int8, Int8) -> Int8 BitXor;

	<attributes>
	<javascriptvalue>(x)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Int8 BitNot;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Int8 Negate;

	<attributes>
	<javascriptvalue>(x)&gt;Math.Abs(x)</javascriptvalue>
	</attributes>
	public get func (Int8) -> UInt8 Abs;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> UInt8   ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Int16   ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> UInt16  ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Int32   ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int8) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> Int8 FromInteger;

	<attributes>
	<javascriptvalue>(x)=&gt;-parseInt(x.member$Negative,16)</javascriptvalue>
	</attributes>
	public get func (negativeinteger) -> Int8 FromNegativeInteger;
}

<!--
8-bit unsigned integer
Range: 0 to 255 = (2^8)-1
Precision: fixed, 8 significant bits
-->
<attributes>
<document>Provides a type and functions for 8-bit unsigned integers.</document>
</attributes>
element UInt8 {

	<attributes>
	<size>1</size>
	<ctype>uint8_t</ctype>
	</attributes>
	struct { }
	public get UInt8 MaxValue = FromInteger(0xFF);
	public get UInt8 MinValue = FromInteger(0x00);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;;y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 Mod;

	public get func (UInt8, UInt8) -> UInt8 Pow = func (x, y) => Int64.Pow(x:Int64, y:Int64):UInt8;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (UInt8, UInt8) -> UInt8 BitXor;

	<attributes>
	<javascriptvalue>(x,y)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> UInt8 BitNot;


	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> UInt8 Negate;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> Int16   ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> UInt16  ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> Int32   ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt8) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> UInt8 FromInteger;
}

<!--
16-bit signed integer
Range: -32768 = -(2^15) to 32867 = (2^15)-1
Precision: fixed, 16 significant bits
-->
<attributes>
<document>Provides a type and functions for 16-bit signed integers.</document>
</attributes>
element Int16 {

	<attributes>
	<size>2</size>
	<ctype>int16_t</ctype>
	</attributes>
	struct { }

	public get Int16 MaxValue = FromInteger(0x7FFF);
	public get Int16 MinValue = FromInteger(0x0008);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 Mod;

	public get func (Int16, Int16) -> Int16 Pow = func (x, y) => Int64.Pow(x:Int64, y:Int64):Int16;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (Int16, Int16) -> Int16 BitXor;

	<attributes>
	<javascriptvalue>(x,y)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Int16 BitNot;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Int16 Negate;

	<attributes>
	<javascriptvalue>(x)&gt;Math.Abs(x)</javascriptvalue>
	</attributes>
	public get func (Int16) -> UInt16 Abs;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> UInt8 ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> UInt16  ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Int32   ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int16) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> Int16 FromInteger;

	<attributes>
	<javascriptvalue>(x)=&gt;-parseInt(x.member$Negative,16)</javascriptvalue>
	</attributes>
	public get func (negativeinteger) -> Int16 FromNegativeInteger;
}

<!--
16-bit unsigned integer
Range: 0 to 65535 = (2^16)-1
Precision: fixed, 16 significant bits
-->
<attributes>
<document>Provides a type and functions for 16-bit unsigned integers.</document>
</attributes>
element UInt16 {

	<attributes>
	<size>2</size>
	<ctype>uint16_t</ctype>
	</attributes>
    struct { }

    public get UInt16 MaxValue = FromInteger(0xFFFF);
    public get UInt16 MinValue = FromInteger(0x0000);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 Mod;

	public get func (UInt16, UInt16) -> UInt16 Pow = func (x, y) => Int64.Pow(x:Int64, y:Int64):UInt16;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> UInt16 BitNot;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (UInt16, UInt16) -> UInt16 BitXor;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> UInt16 Negate;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> UInt8 ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> Int16  ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> Int32   ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt16) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> UInt16 FromInteger;
}

<!--
32-bit signed integer
Range: 2147483647 = -(2^31) to -2147483648 = (2^31)-1
Precision: fixed, 32 significant bits
-->
<attributes>
<document>Provides a type and functions for 32-bit signed integers.</document>
</attributes>
element Int32 {

	<attributes>
	<size>4</size>
	<ctype>int32_t</ctype>
	</attributes>
    struct { }

    public get Int32 MaxValue = FromInteger(0x7FFFFFFF);
    public get Int32 MinValue = FromInteger(0x80000000);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 Mod;

	public get func (Int32, Int32) -> Int32 Pow = func (x, y) => Int64.Pow(x:Int64, y:Int64):Int32;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (Int32, Int32) -> Int32 BitXor;

	<attributes>
	<javascriptvalue>(x,y)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Int32 BitNot;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Int32 Negate;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.Abs(x)</javascriptvalue>
	</attributes>
	public get func (Int32) -> UInt32 Abs;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> UInt8 ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Int16  ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> UInt16 ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int32) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> Int32 FromInteger;

	<attributes>
	<javascriptvalue>(x)=&gt;-parseInt(x.member$Negative,16)</javascriptvalue>
	</attributes>
	public get func (negativeinteger) -> Int32 FromNegativeInteger;
}

<!--
32-bit unsigned integer
Range: 0 to 4294967295 = (2^32)-1
Precision: fixed, 32 significant bits
-->
<attributes>
<document>Provides a type and functions for 32-bit unsigned integers.</document>
</attributes>
element UInt32 {

	<attributes>
	<size>4</size>
	<ctype>uint32_t</ctype>
	</attributes>
    struct { }

    public get UInt32 MaxValue = FromInteger(0xFFFFFFFF);
    public get UInt32 MinValue = FromInteger(0x00000000);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 Mod;

	public get func (UInt32, UInt32) -> UInt32 Pow = func (x, y) => Int64.Pow(x:Int64, y:Int64):UInt32;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (UInt32, UInt32) -> UInt32 BitXor;

	<attributes>
	<javascriptvalue>(x)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> UInt32 BitNot;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> UInt32 Negate;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> UInt8 ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> Int16  ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> UInt16 ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> Int32 ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt32) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> UInt32 FromInteger;
}

<!--
64-bit signed integer
Range: −9223372036854775808 = -(2^63) to 9223372036854775807 = (2^63)-1
Precision: fixed, 64 significant bits
-->
<attributes>
<document>Provides a type and functions for 64-bit signed integers.</document>
</attributes>
element Int64 {

	<attributes>
	<size>8</size>
	<ctype>int64_t</ctype>
	</attributes>
    struct { }

    public get Int64 MaxValue = FromInteger(0x7FFFFFFFFFFFFFFF);
    public get Int64 MinValue = FromInteger(0x8000000000000000);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 Mod;

	public get func (Int64, Int64) -> Int64 Pow =
		func(base, exp) => {
			//exp by squaring
			result = 1:Int64;
			{
				if LessThanOrEquals(exp, 1:Int64) then
					result = Mul(result, base);
				exp = Div(exp, 2:Int64);
				if Equals(exp, 0:Int64) then break;
				base = Mul(base,base);
				continue;
			}
			return result;
		}

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (Int64, Int64) -> Int64 BitXor;

	<attributes>
	<javascriptvalue>(x)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Int64 BitNot;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Int64 Negate;

	<attributes>
	<javascriptvalue>(x)=Math.Abs(x)</javascriptvalue>
	</attributes>
	public get func (Int64) -> UInt64 Abs;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> UInt8 ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Int16  ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> UInt16 ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Int32 ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> UInt32 ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Int64) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> Int64 FromInteger;

	<attributes>
	<javascriptvalue>(x)=&gt;-parseInt(x.member$Negative,16)</javascriptvalue>
	</attributes>
	public get func (negativeinteger) -> Int64 FromNegativeInteger;
}

<!--
64-bit unsigned integer
Range: 0 to 18446744073709551615 = (2^64)-1
Precision: fixed, 64 significant bits
-->
<attributes>
<document>Provides a type and functions for 64-bit unsigned integers.</document>
</attributes>
element UInt64 {

	<attributes>
	<size>8</size>
	<ctype>uint64_t</ctype>
	</attributes>
    struct { }

    public get UInt64 MaxValue = FromInteger(0xFFFFFFFFFFFFFFFF);
    public get UInt64 MinValue = FromInteger(0x0000000000000000);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> bool Equals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> bool LessThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&gt;y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> bool MoreThan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&lt;=y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.floor(x/y)</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 Mod;

	public get func (UInt64, UInt64) -> UInt64 Pow =
		func(base, exp) => {
			//exp by squaring
			result = 1:UInt64;
			{
				if LessThanOrEquals(exp, 1:UInt64) then
					result = Mul(result, base);
				exp = Div(exp, 2:UInt64);
				if Equals(exp, 0:UInt64) then break;
				base = Mul(base,base);
				continue;
			}
			return result;
		}

	<attributes>
	<javascriptvalue>(x,y)=&gt;x&amp;y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 BitAnd;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x|y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 BitOr;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x^y</javascriptvalue>
	</attributes>
	public get func (UInt64, UInt64) -> UInt64 BitXor;

	<attributes>
	<javascriptvalue>(x)=&gt;~x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> UInt64 BitNot;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> UInt64 Negate;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> Int8   ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> UInt8 ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> Int16  ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> UInt16 ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> Int32 ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> UInt32 ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> Int64  ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> Float32 ToFloat32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (UInt64) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> UInt64 FromInteger;
}

<!--
32-bit floating point number
Range: defined by IEEE 754-2008 single-Precision floating point number, double-precision also common
Precision: floating, 23 significant bits
-->
<attributes>
<document>Provides a type and functions for 32-bit floating point numbers.</document>
</attributes>
element Float32 {

	<attributes>
	<size>4</size>
	<ctype>float</ctype>
	</attributes>
	struct { }

	public get Float32 MaxValue = FromBits(0x7F7FFFFF);
	public get Float32 MinValue = FromBits(0xFF7FFFFF);
	public get Float32 Epsilon  = FromBits(0x00000001);
	public get Float32 Infinity = FromBits(0x7F800000);
	public get Float32 MinNaN   = FromBits(0x7F800001);
	public get Float32 MaxNaN   = FromBits(0x7FFFFFFF);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> bool Equals;

	<attributes>
	<javascriptvalue>x&lt;y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> bool LessThan;

	<attributes>
	<javascriptvalue>x&gt;y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> bool MoreThan;

	<attributes>
	<javascriptvalue>x&lt;=y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x)=&gt;isNaN(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> bool IsNaN = func (x) => not Equals(x,x);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x/</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Mod;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.pow(x,y)</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Pow;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Negate;

	<attributes>
	<javascriptvalue>(x)=Math.Abs(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Abs;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.exp(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Exp;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.log(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Log;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.sin(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Sin;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.cos(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Cos;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.tan(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Tan;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.asin(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Asin;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.acos(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Acos;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.atan(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Atan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.atan2(x,y)</javascriptvalue>
	</attributes>
	public get func (Float32, Float32) -> Float32 Atan2;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.sinh(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Sinh;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.cosh(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Cosh;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.tanh(x)</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float32 Tanh;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> Int8    ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> UInt8   ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> Int16   ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> UInt16  ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> Int32   ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float32) -> Float64 ToFloat64;

	<attributes>
	<javascriptvalue>(x)=&gt;(Float32Array.of(x))[0]</javascriptvalue>
	</attributes>
	public get func (Float32) -> Int32   BitsToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;(Float32Array.of(x))[0]</javascriptvalue>
	</attributes>
	public get func (Float32) -> UInt32  BitsToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> Float32 FromInteger;

	<attributes>
	<javascriptvalue>(x)=&gt;-parseInt(x.member$Negative,16)</javascriptvalue>
	</attributes>
	public get func (negativeinteger) -> Float32 FromNegativeInteger;

	<attributes>
	<javascriptvalue>((x)=&gt;parseInt(x.member$Denominator,16)/parseInt(x.member$Numerator,16))</javascriptvalue>
	</attributes>
	public get func (fractional) -> Float32 FromFractional;

	<attributes>
	<javascriptvalue>((x)=&gt;-(parseInt(x.member$Negative.member$Denominator,16)/parseInt(x.member$Negative.member$Numerator),16))</javascriptvalue>
	</attributes>
	public get func (negativefractional) -> Float32 FromNegativeFractional;

	<attributes>
	<javascriptrequire_i64/>
	<javascriptvalue>(x)=&gt;(new Float32Array(i64_fromhexint(x).buffer))[0]</javascriptvalue>
	</attributes>
	public get func (integer) -> Float32 FromBits;
}

<!--
64-bit floating point number
Range: defined by IEEE 754-2008 double-Precision floating point number
Precision: floating, 52 significant bits
-->
<attributes>
<document>Provides a type and functions for 64-bit floating point numbers.</document>
</attributes>
element Float64 {

	<attributes>
	<size>8</size>
	<ctype>uint64_t</ctype>
	</attributes>
	struct { }

	public get Float64 MaxValue = FromBits(0x7FEFFFFFFFFFFFFF);
	public get Float64 MinValue = FromBits(0xFFEFFFFFFFFFFFFF);
	public get Float64 Epsilon  = FromBits(0x0000000000000001);
	public get Float64 Infinity = FromBits(0x7FF0000000000000);
	public get Float64 MinNaN   = FromBits(0x7FF0000000000001);
	public get Float64 MaxNaN   = FromBits(0x7FFFFFFFFFFFFFFF);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x==y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> bool Equals;

	<attributes>
	<javascriptvalue>x&lt;y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> bool LessThan;

	<attributes>
	<javascriptvalue>x&gt;y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> bool MoreThan;

	<attributes>
	<javascriptvalue>x&lt;=y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> bool LessThanOrEquals;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x>=y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> bool MoreThanOrEquals;

	<attributes>
	<javascriptvalue>(x)=&gt;isNaN(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> bool IsNaN = func (x) => not Equals(x,x);

	<attributes>
	<javascriptvalue>(x,y)=&gt;x+y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Add;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x-y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Sub;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x*y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Mul;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x/</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Div;

	<attributes>
	<javascriptvalue>(x,y)=&gt;x%y</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Mod;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.pow(x,y)</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Pow;

	<attributes>
	<javascriptvalue>(x)=&gt;-x</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Negate;

	<attributes>
	<javascriptvalue>(x)=Math.Abs(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Abs;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.exp(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Exp;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.log(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Log;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.sin(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Sin;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.cos(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Cos;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.tan(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Tan;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.asin(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Asin;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.acos(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Acos;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.atan(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Atan;

	<attributes>
	<javascriptvalue>(x,y)=&gt;Math.atan2(x,y)</javascriptvalue>
	</attributes>
	public get func (Float64, Float64) -> Float64 Atan2;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.sinh(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Sinh;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.cosh(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Cosh;

	<attributes>
	<javascriptvalue>(x)=&gt;Math.tanh(x)</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float64 Tanh;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> Int8    ToInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> UInt8   ToUInt8;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> Int16   ToInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> UInt16  ToUInt16;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> Int32   ToInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> UInt32  ToUInt32;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> Int64   ToInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> UInt64  ToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;x</javascriptvalue>
	</attributes>
	public get func (Float64) -> Float32 ToFloat32;

	<attributes>
	<javascriptrequire_i64/>
	<javascriptvalue>(x)=&gt;(new Uint32Array(Float64Array.of(x)))</javascriptvalue>
	</attributes>
	public get func (Float64) -> Int64   BitsToInt64;

	<attributes>
	<javascriptrequire_i64/>
	<javascriptvalue>(x)=&gt;(new Uint32Array(Float64Array.of(x)))</javascriptvalue>
	</attributes>
	public get func (Float64) -> UInt64  BitsToUInt64;

	<attributes>
	<javascriptvalue>(x)=&gt;parseInt(x,16)</javascriptvalue>
	</attributes>
	public get func (integer) -> Float64 FromInteger;

	<attributes>
	<javascriptvalue>(x)=&gt;-parseInt(x.member$Negative,16)</javascriptvalue>
	</attributes>
	public get func (negativeinteger) -> Float64 FromNegativeInteger;

	<attributes>
	<javascriptvalue>((x)=&gt;parseInt(x.member$Denominator,16)/parseInt(x.member$Numerator,16))</javascriptvalue>
	</attributes>
	public get func (fractional) -> Float64 FromFractional;

	<attributes>
	<javascriptvalue>((x)=&gt;-(parseInt(x.member$Negative.member$Denominator,16)/parseInt(x.member$Negative.member$Numerator)),16))</javascriptvalue>
	</attributes>
	public get func (negativefractional) -> Float64 FromNegativeFractional;

	<attributes>
	<pacedntjsrequire>i64</pacedntjsrequire>
	<javascriptvalue>(x)=&gt;(new Uint64Array(i64_fromhexint(x).buffer))[0]</javascriptvalue>
	</attributes>
	public get func (integer) -> Float64 FromBits;
}

//convertions
convertion Int8    : UInt8   = Int8.ToUInt8;
convertion Int8    : Int16   = Int8.ToInt16;
convertion Int8    : UInt16  = Int8.ToUInt16;
convertion Int8    : Int32   = Int8.ToInt32;
convertion Int8    : UInt32  = Int8.ToUInt32;
convertion Int8    : Int64   = Int8.ToInt64;
convertion Int8    : UInt64  = Int8.ToUInt64;
convertion Int8    : Float32 = Int8.ToFloat32;
convertion Int8    : Float64 = Int8.ToFloat64;
convertion UInt8   : Int8    = UInt8.ToInt8;
convertion UInt8   : Int16   = UInt8.ToInt16;
convertion UInt8   : UInt16  = UInt8.ToUInt16;
convertion UInt8   : Int32   = UInt8.ToInt32;
convertion UInt8   : UInt32  = UInt8.ToUInt32;
convertion UInt8   : Int64   = UInt8.ToInt64;
convertion UInt8   : UInt64  = UInt8.ToUInt64;
convertion UInt8   : Float32 = UInt8.ToFloat32;
convertion UInt8   : Float64 = UInt8.ToFloat64;
convertion Int16   : Int8    = Int16.ToInt8;
convertion Int16   : UInt8   = Int16.ToUInt8;
convertion Int16   : UInt16  = Int16.ToUInt16;
convertion Int16   : Int32   = Int16.ToInt32;
convertion Int16   : UInt32  = Int16.ToUInt32;
convertion Int16   : Int64   = Int16.ToInt64;
convertion Int16   : UInt64  = Int16.ToUInt64;
convertion Int16   : Float32 = Int16.ToFloat32;
convertion Int16   : Float64 = Int16.ToFloat64;
convertion UInt16  : Int8    = UInt16.ToInt8;
convertion UInt16  : UInt8   = UInt16.ToUInt8;
convertion UInt16  : Int16   = UInt16.ToInt16;
convertion UInt16  : Int32   = UInt16.ToInt32;
convertion UInt16  : UInt32  = UInt16.ToUInt32;
convertion UInt16  : Int64   = UInt16.ToInt64;
convertion UInt16  : UInt64  = UInt16.ToUInt64;
convertion UInt16  : Float32 = UInt16.ToFloat32;
convertion UInt16  : Float64 = UInt16.ToFloat64;
convertion Int32   : Int8    = Int32.ToInt8;
convertion Int32   : UInt8   = Int32.ToUInt8;
convertion Int32   : Int16   = Int32.ToInt16;
convertion Int32   : UInt16  = Int32.ToUInt16;
convertion Int32   : UInt32  = Int32.ToUInt32;
convertion Int32   : Int64   = Int32.ToInt64;
convertion Int32   : UInt64  = Int32.ToUInt64;
convertion Int32   : Float32 = Int32.ToFloat32;
convertion Int32   : Float64 = Int32.ToFloat64;
convertion UInt32  : Int8    = UInt32.ToInt8;
convertion UInt32  : UInt8   = UInt32.ToUInt8;
convertion UInt32  : Int16   = UInt32.ToInt16;
convertion UInt32  : UInt16  = UInt32.ToUInt16;
convertion UInt32  : Int32   = UInt32.ToInt32;
convertion UInt32  : Int64   = UInt32.ToInt64;
convertion UInt32  : UInt64  = UInt32.ToUInt64;
convertion UInt32  : Float32 = UInt32.ToFloat32;
convertion UInt32  : Float64 = UInt32.ToFloat64;
convertion Int64   : Int8    = Int64.ToInt8;
convertion Int64   : UInt8   = Int64.ToUInt8;
convertion Int64   : Int16   = Int64.ToInt16;
convertion Int64   : UInt16  = Int64.ToUInt16;
convertion Int64   : Int32   = Int64.ToInt32;
convertion Int64   : UInt32  = Int64.ToUInt32;
convertion Int64   : UInt64  = Int64.ToUInt64;
convertion Int64   : Float32 = Int64.ToFloat32;
convertion Int64   : Float64 = Int64.ToFloat64;
convertion UInt64  : Int8    = UInt64.ToInt8;
convertion UInt64  : UInt8   = UInt64.ToUInt8;
convertion UInt64  : Int16   = UInt64.ToInt16;
convertion UInt64  : UInt16  = UInt64.ToUInt16;
convertion UInt64  : Int32   = UInt64.ToInt32;
convertion UInt64  : UInt32  = UInt64.ToUInt32;
convertion UInt64  : Int64   = UInt64.ToInt64;
convertion UInt64  : Float32 = UInt64.ToFloat32;
convertion UInt64  : Float64 = UInt64.ToFloat64;
convertion Float32 : Int8    = Float32.ToInt8;
convertion Float32 : UInt8   = Float32.ToUInt8;
convertion Float32 : Int16   = Float32.ToInt16;
convertion Float32 : UInt16  = Float32.ToUInt16;
convertion Float32 : Int32   = Float32.ToInt32;
convertion Float32 : UInt32  = Float32.ToUInt32;
convertion Float32 : Int64   = Float32.ToInt64;
convertion Float32 : UInt64  = Float32.ToUInt64;
convertion Float32 : Float64 = Float32.ToFloat64;
convertion Float64 : Int8    = Float64.ToInt8;
convertion Float64 : UInt8   = Float64.ToUInt8;
convertion Float64 : Int16   = Float64.ToInt16;
convertion Float64 : UInt16  = Float64.ToUInt16;
convertion Float64 : Int32   = Float64.ToInt32;
convertion Float64 : UInt32  = Float64.ToUInt32;
convertion Float64 : Int64   = Float64.ToInt64;
convertion Float64 : UInt64  = Float64.ToUInt64;
convertion Float64 : Float32 = Float64.ToFloat32;

convertion integer : Int8    = Int8.FromInteger;
convertion integer : UInt8   = UInt8.FromInteger;
convertion integer : Int16   = Int16.FromInteger;
convertion integer : UInt16  = UInt16.FromInteger;
convertion integer : Int32   = Int32.FromInteger;
convertion integer : UInt32  = UInt32.FromInteger;
convertion integer : Int64   = Int64.FromInteger;
convertion integer : UInt64  = UInt64.FromInteger;
convertion integer : Float32 = Float32.FromInteger;
convertion integer : Float64 = Float64.FromInteger;
convertion negativeinteger : Int8  = Int8.FromNegativeInteger;
convertion negativeinteger : Int16 = Int16.FromNegativeInteger;
convertion negativeinteger : Int32 = Int32.FromNegativeInteger;
convertion negativeinteger : Int64 = Int64.FromNegativeInteger;
convertion negativeinteger : Float32 = Float32.FromNegativeInteger;
convertion negativeinteger : Float64 = Float64.FromNegativeInteger;
convertion fractional : Float32 = Float32.FromFractional;
convertion fractional : Float64 = Float64.FromFractional;
convertion negativefractional : Float32 = Float32.FromNegativeFractional;
convertion negativefractional : Float64 = Float64.FromNegativeFractional;

//configs

config implicits {
	implicit convertion Int8 : Int16;
	implicit convertion Int8 : Int32;
	implicit convertion Int8 : Int64;
	implicit convertion Int16 : Int32;
	implicit convertion Int16 : Int64;
	implicit convertion Int32 : Int64;
	implicit convertion UInt8 : Int16;
	implicit convertion UInt8 : UInt16;
	implicit convertion UInt8 : Int32;
	implicit convertion UInt8 : UInt32;
	implicit convertion UInt8 : Int64;
	implicit convertion UInt8 : UInt64;
	implicit convertion UInt16 : Int32;
	implicit convertion UInt16 : UInt32;
	implicit convertion UInt16 : Int64;
	implicit convertion UInt16 : UInt64;
	implicit convertion UInt32 : Int64;
	implicit convertion UInt32 : UInt64;

	implicit convertion integer : Int8;
	implicit convertion integer : UInt8;
	implicit convertion integer : Int16;
	implicit convertion integer : UInt16;
	implicit convertion integer : Int32;
	implicit convertion integer : UInt32;
	implicit convertion integer : Int64;
	implicit convertion integer : UInt64;
	implicit convertion integer : Float32;
	implicit convertion integer : Float64;
	implicit convertion negativeinteger : Int8;
	implicit convertion negativeinteger : Int16;
	implicit convertion negativeinteger : Int32;
	implicit convertion negativeinteger : Int64;
	implicit convertion negativeinteger : Float32;
	implicit convertion negativeinteger : Float64;
	implicit convertion fractional : Float32;
	implicit convertion fractional : Float64;
	implicit convertion negativefractional : Float32;
	implicit convertion negativefractional : Float64;
}

config ops {

	//these so that negative number literals work without automatic convertions
	operator - integer = func(integer x) => [Negative = x];
	operator - fractional = func(fractional x) => [Negative = x];

	operator Int8    == Int8    = Int8.Equals;
	operator UInt8   == UInt8   = UInt8.Equals;
	operator Int16   == Int16   = Int16.Equals;
	operator UInt16  == UInt16  = UInt16.Equals;
	operator Int32   == Int32   = Int32.Equals;
	operator UInt32  == UInt32  = UInt32.Equals;
	operator Int64   == Int64   = Int64.Equals;
	operator UInt64  == UInt64  = UInt64.Equals;
	operator Float32 == Float32 = Float32.Equals;
	operator Float64 == Float64 = Float64.Equals;
	operator Int8    < Int8     = Int8.LessThan;
	operator UInt8   < UInt8    = UInt8.LessThan;
	operator Int16   < Int16    = Int16.LessThan;
	operator UInt16  < UInt16   = UInt16.LessThan;
	operator Int32   < Int32    = Int32.LessThan;
	operator UInt32  < UInt32   = UInt32.LessThan;
	operator Int64   < Int64    = Int64.LessThan;
	operator UInt64  < UInt64   = UInt64.LessThan;
	operator Float32 < Float32  = Float32.LessThan;
	operator Float64 < Float64  = Float64.LessThan;
	operator Int8    > Int8     = Int8.MoreThan;
	operator UInt8   > UInt8    = UInt8.MoreThan;
	operator Int16   > Int16    = Int16.MoreThan;
	operator UInt16  > UInt16   = UInt16.MoreThan;
	operator Int32   > Int32    = Int32.MoreThan;
	operator UInt32  > UInt32   = UInt32.MoreThan;
	operator Int64   > Int64    = Int64.MoreThan;
	operator UInt64  > UInt64   = UInt64.MoreThan;
	operator Float32 > Float32  = Float32.MoreThan;
	operator Float64 > Float64  = Float64.MoreThan;
	operator Int8    <= Int8    = Int8.LessThanOrEquals;
	operator UInt8   <= UInt8   = UInt8.LessThanOrEquals;
	operator Int16   <= Int16   = Int16.LessThanOrEquals;
	operator UInt16  <= UInt16  = UInt16.LessThanOrEquals;
	operator Int32   <= Int32   = Int32.LessThanOrEquals;
	operator UInt32  <= UInt32  = UInt32.LessThanOrEquals;
	operator Int64   <= Int64   = Int64.LessThanOrEquals;
	operator UInt64  <= UInt64  = UInt64.LessThanOrEquals;
	operator Float32 <= Float32 = Float32.LessThanOrEquals;
	operator Float64 <= Float64 = Float64.LessThanOrEquals;
	operator Int8    >= Int8    = Int8.MoreThanOrEquals;
	operator UInt8   >= UInt8   = UInt8.MoreThanOrEquals;
	operator Int16   >= Int16   = Int16.MoreThanOrEquals;
	operator UInt16  >= UInt16  = UInt16.MoreThanOrEquals;
	operator Int32   >= Int32   = Int32.MoreThanOrEquals;
	operator UInt32  >= UInt32  = UInt32.MoreThanOrEquals;
	operator Int64   >= Int64   = Int64.MoreThanOrEquals;
	operator UInt64  >= UInt64  = UInt64.MoreThanOrEquals;
	operator Float32 >= Float32 = Float32.MoreThanOrEquals;
	operator Float64 >= Float64 = Float64.MoreThanOrEquals;
	operator Int8    + Int8     = Int8.Add;
	operator UInt8   + UInt8    = UInt8.Add;
	operator Int16   + Int16    = Int16.Add;
	operator UInt16  + UInt16   = UInt16.Add;
	operator Int32   + Int32    = Int32.Add;
	operator UInt32  + UInt32   = UInt32.Add;
	operator Int64   + Int64    = Int64.Add;
	operator UInt64  + UInt64   = UInt64.Add;
	operator Float32 + Float32  = Float32.Add;
	operator Float64 + Float64  = Float64.Add;
	operator Int8    - Int8     =  Int8.Sub;
	operator UInt8   - UInt8    = UInt8.Sub;
	operator Int16   - Int16    = Int16.Sub;
	operator UInt16  - UInt16   = UInt16.Sub;
	operator Int32   - Int32    = Int32.Sub;
	operator UInt32  - UInt32   = UInt32.Sub;
	operator Int64   - Int64    = Int64.Sub;
	operator UInt64  - UInt64   = UInt64.Sub;
	operator Float32 - Float32  = Float32.Sub;
	operator Float64 - Float64  = Float64.Sub;
	operator Int8    * Int8     = Int8.Mul;
	operator UInt8   * UInt8    = UInt8.Mul;
	operator Int16   * Int16    = Int16.Mul;
	operator UInt16  * UInt16   = UInt16.Mul;
	operator Int32   * Int32    = Int32.Mul;
	operator UInt32  * UInt32   = UInt32.Mul;
	operator Int64   * Int64    = Int64.Mul;
	operator UInt64  * UInt64   = UInt64.Mul;
	operator Float32 * Float32  = Float32.Mul;
	operator Float64 * Float64  = Float64.Mul;
	operator Int8    / Int8     = Int8.Div;
	operator UInt8   / UInt8    = UInt8.Div;
	operator Int16   / Int16    = Int16.Div;
	operator UInt16  / UInt16   = UInt16.Div;
	operator Int32   / Int32    = Int32.Div;
	operator UInt32  / UInt32   = UInt32.Div;
	operator Int64   / Int64    = Int64.Div;
	operator UInt64  / UInt64   = UInt64.Div;
	operator Float32 / Float32  = Float32.Div;
	operator Float64 / Float64  = Float64.Div;
	operator Int8    % Int8     = Int8.Mod;
	operator UInt8   % UInt8    = UInt8.Mod;
	operator Int16   % Int16    = Int16.Mod;
	operator UInt16  % UInt16   = UInt16.Mod;
	operator Int32   % Int32    = Int32.Mod;
	operator UInt32  % UInt32   = UInt32.Mod;
	operator Int64   % Int64    = Int64.Mod;
	operator UInt64  % UInt64   = UInt64.Mod;
	operator Float32 % Float32  = Float32.Mod;
	operator Float64 % Float64  = Float64.Mod;
	operator Int8    ^ Int8     = Int8.Pow;
	operator UInt8   ^ UInt8    = UInt8.Pow;
	operator Int16   ^ Int16    = Int16.Pow;
	operator UInt16  ^ UInt16   = UInt16.Pow;
	operator Int32   ^ Int32    = Int32.Pow;
	operator UInt32  ^ UInt32   = UInt32.Pow;
	operator Int64   ^ Int64    = Int64.Pow;
	operator UInt64  ^ UInt64   = UInt64.Pow;
	operator Float32 ^ Float32  = Float32.Pow;
	operator Float64 ^ Float64  = Float64.Pow;
	operator Int8   'bitand' Int8   = Int8.BitAnd;
	operator UInt8  'bitand' UInt8  = UInt8.BitAnd;
	operator Int16  'bitand' Int16  = Int16.BitAnd;
	operator UInt16 'bitand' UInt16 = UInt16.BitAnd;
	operator Int32  'bitand' Int32  = Int32.BitAnd;
	operator UInt32 'bitand' UInt32 = UInt32.BitAnd;
	operator Int64  'bitand' Int64  = Int64.BitAnd;
	operator UInt64 'bitand' UInt64 = UInt64.BitAnd;
	operator Int8   'bitor'  Int8   = Int8.BitOr;
	operator UInt8  'bitor'  UInt8  = UInt8.BitOr;
	operator Int16  'bitor'  Int16  = Int16.BitOr;
	operator UInt16 'bitor'  UInt16 = UInt16.BitOr;
	operator Int32  'bitor'  Int32  = Int32.BitOr;
	operator UInt32 'bitor'  UInt32 = UInt32.BitOr;
	operator Int64  'bitor'  Int64  = Int64.BitOr;
	operator UInt64 'bitor'  UInt64 = UInt64.BitOr;
	operator Int8   'bitxor' Int8   = Int8.BitXor;
	operator UInt8  'bitxor' UInt8  = UInt8.BitXor;
	operator Int16  'bitxor' Int16  = Int16.BitXor;
	operator UInt16 'bitxor' UInt16 = UInt16.BitXor;
	operator Int32  'bitxor' Int32  = Int32.BitXor;
	operator UInt32 'bitxor' UInt32 = UInt32.BitXor;
	operator Int64  'bitxor' Int64  = Int64.BitXor;
	operator UInt64 'bitxor' UInt64 = UInt64.BitXor;
	operator 'bitnot' Int8   = Int8.BitNot;
	operator 'bitnot' UInt8  = UInt8.BitNot;
	operator 'bitnot' Int16  = Int16.BitNot;
	operator 'bitnot' UInt16 = UInt16.BitNot;
	operator 'bitnot' Int32  = Int32.BitNot;
	operator 'bitnot' UInt32 = UInt32.BitNot;
	operator 'bitnot' Int64  = Int64.BitNot;
	operator 'bitnot' UInt64 = UInt64.BitNot;
	operator - Int8    = Int8.Negate;
	operator - Int16   = Int16.Negate;
	operator - Int32   = Int32.Negate;
	operator - Int64   = Int64.Negate;
	operator - Float32 = Float32.Negate;
	operator - Float64 = Float64.Negate;
	operator 'abs' Int8    = Int8.Abs;
	operator 'abs' Int16   = Int16.Abs;
	operator 'abs' Int32   = Int32.Abs;
	operator 'abs' Int64   = Int64.Abs;
	operator 'abs' Float32 = Float32.Abs;
	operator 'abs' Float64 = Float64.Abs;
	operator 'isnan' Float32 = Float32.IsNaN;
	operator 'exp'   Float32 = Float32.Exp;
	operator 'log'   Float32 = Float32.Log;
	operator 'sin'   Float32 = Float32.Sin;
	operator 'cos'   Float32 = Float32.Cos;
	operator 'tan'   Float32 = Float32.Tan;
	operator 'asin'  Float32 = Float32.Asin;
	operator 'acos'  Float32 = Float32.Acos;
	operator 'atan'  Float32 = Float32.Atan;
	operator Float32 'atan2' Float32 = Float32.Atan2;
	operator 'sinh'  Float32 = Float32.Sinh;
	operator 'cosh'  Float32 = Float32.Cosh;
	operator 'tanh'  Float32 = Float32.Tanh;
	operator 'isnan' Float64 = Float64.IsNaN;
	operator 'exp'   Float64 = Float64.Exp;
	operator 'log'   Float64 = Float64.Log;
	operator 'sin'   Float64 = Float64.Sin;
	operator 'cos'   Float64 = Float64.Cos;
	operator 'tan'   Float64 = Float64.Tan;
	operator 'asin'  Float64 = Float64.Asin;
	operator 'acos'  Float64 = Float64.Acos;
	operator 'atan'  Float64 = Float64.Atan;
	operator Float64 'atan2' Float64 = Float64.Atan2;
	operator 'sinh'  Float64 = Float64.Sinh;
	operator 'cosh'  Float64 = Float64.Cosh;
	operator 'tanh'  Float64 = Float64.Tanh;
}

config Int64_literals {
	automatic convertion integer : Int64;
	automatic convertion negativeinteger : Int64;
}
config Float64_literals {
	automatic convertion fractional : Float64;
	automatic convertion negativefractional : Float64;
}
