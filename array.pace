[package array]
[depends snum]

use snumops;
use snumimplicits;

<attributes>
<document>A genericly typed fixed size collection.</document>
</attributes>
element Array
{

    //struct because while arrays are by reference,
    //an Array object stores a flag of it being read-only along with the actual array
    <attributes>
    <immutable/>
    </attributes>
    struct <T>
    {

        //true if assigning to array elements is not permitted
        visible bool IsReadonly = false;

        PrimitiveArray<T> UnderlyingArray = AllocatePrimitiveArray<T>(0);

        public get UInt32 Length => PrimitiveArrayLength(UnderlyingArray);

        //this array as readonly
        public get Array<T> AsReadonly =>
            new Array<T> { IsReadonly = true, UnderlyingArray = UnderlyingArray };

        //element get/set methods
        public T Indexer_get(Int64 index) => PrimitiveArrayGetElement(UnderlyingArray, ConvertIndex(index, Length));
        public Indexer_set(Int64 index, T value) => { PrimitiveArraySetElement(UnderlyingArray, ConvertIndex(index, Length), value); };

    }

    //converts negative indicies into positive ones
    //and throws if out of range
    UInt32 ConvertIndex(Int64 index, UInt32 length) =>
    {
        if index < 0 then {
            index = length + index:UInt32;
            if index < 0 then ThrowOutOfRange();
        }
        if index >= length then ThrowOutOfRange();
        return index:UInt32;
    }

    ThrowOutOfRange() =>
    {
        throw OutOfRange "Index was out of range.";
    }

    //allocates an array of the specified length
    public Array<T> Allocate<T>(UInt32 length) =>
        new Array<T> { UnderlyingArray = AllocatePrimitiveArray<T>(length) };

    //shallow clone an array, optionally from and to specified indicies
    public Array<T> Clone<T>(Array<T> source, UInt32 from = 0, UInt32 to = source.Length) =>
    {
        if from >= source.Length or to > source.Length then
            throw OutOfRange "Starting or ending position out of range.";
        return new Array<T> { UnderlyingArray = PrimitiveArrayCopy(source.UnderlyingArray, from, to) };
    }

    public Array<T> Empty<T>() => new Array<T>;

    //compares the array elements with the specified function
    public bool Compare<TFirst, TSecond>(Array<TFirst> first, Array<TSecond> second, func(TFirst, TSecond) -> bool predicate) =>
    {

        //must be same length
        if not first.Length == second.Length then return false;

        //iterate all elements
        i = 0:Int64;
        {
            //return false if fails
            if not predicate(first[i], second[i]) then return false;

            i = i + 1;
            if i < first.Length then continue;
        }

        //if all calls to predicate are true then return true
        return true;
    }

    //the actual array type and functions for it
    struct PrimitiveArray<T> { }

    <attributes>
    <javascriptvalue>(x)=>new Array(x)</javascriptvalue>
    </attributes>
    func<T>(UInt32) -> PrimitiveArray<T> AllocatePrimitiveArray;

    <attributes>
    <javascriptvalue>(x)=>x.length</javascriptvalue>
    </attributes>
    func<T>(PrimitiveArray<T>) -> UInt32 PrimitiveArrayLength;

    <attributes>
    <javascriptvalue>(x,y)=>x[y]</javascriptvalue>
    </attributes>
    func<T>(PrimitiveArray<T>, UInt32) -> T PrimitiveArrayGetElement;

    <attributes>
    <javascriptvalue>(x,y,z)=>{x[y]=z;}</javascriptvalue>
    </attributes>
    func<T>(PrimitiveArray<T>, UInt32, T) PrimitiveArraySetElement;

    <attributes>
    <javascriptvalue>(x,y,z)=>x.slice(y,z)</javascriptvalue>
    </attributes>
    func<T>(PrimitiveArray<T>, UInt32, UInt32) -> PrimitiveArray<T> PrimitiveArrayCopy;

}
